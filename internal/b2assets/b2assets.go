// Code generated by go-bindata.
// sources:
// data/status.html
// DO NOT EDIT!

package b2assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStatusHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x93\x31\x6b\xeb\x30\x14\x85\x67\xe7\x57\x5c\x82\xc7\x10\x91\x8c\x8f\x1b\x2d\x6f\x79\xcb\x83\x12\x28\x9d\x65\x4b\x44\xa2\xb2\x64\x24\x39\x4d\x10\xfa\xef\x45\x92\x9d\x3a\xd0\xa1\x63\x37\x73\xef\x39\xc7\xf7\x3b\xd8\x28\xc3\xa0\xe9\x06\xa5\x60\x9c\x62\x50\x41\x0b\xda\x1d\xa1\xd7\x4a\x98\x00\x3e\xb0\x30\x79\x24\x75\x8e\xa4\xa8\x36\xd8\x59\x7e\xa7\x1b\x00\x94\x07\x3a\x88\x20\x2d\x07\xcd\x82\x30\xfd\x1d\x89\x3c\xe4\x0d\x40\x8c\x8e\x99\x8b\x80\xb6\x0a\x76\xd0\x4a\xe5\x03\xfc\x39\xc1\xfe\x7f\x99\xfc\x53\x3e\xa4\x54\xb4\x28\x8f\x34\xc6\x45\x0a\x29\x21\x91\xc7\x1a\x83\x81\x75\x5a\xd4\xe7\x55\xa8\x32\x5c\xdc\x76\xd0\xf6\x76\x32\x25\xb4\xa4\xcf\x71\xd9\xe5\x28\x06\x4e\x63\x1c\xcf\x2b\x43\x0e\x0e\xbc\x6c\x70\x74\xf6\xe2\x84\xf7\x70\x65\x7a\x12\xa7\x6d\x8c\x35\x2c\xa5\x2d\x0c\xec\x96\x07\xda\xda\xf7\xd7\x11\xda\xfd\x5f\xa6\xb5\x5f\xce\x4b\x69\x4b\x91\x2c\x76\x5a\x13\x49\x70\x5f\x37\x0a\xc3\x17\x30\xb2\x3a\x7f\x59\x34\xb9\xb6\x69\xd4\x96\x71\x5f\xfb\x6a\x9a\x07\x98\x61\x83\xd8\x41\x7b\x65\xba\x54\xf5\xe6\x54\x10\xce\x67\x57\xb3\xb4\x94\x25\x8f\x8e\x9a\x95\x57\xe5\x96\xf3\x61\xa5\x90\x2b\xd3\xfb\x97\xf9\xca\xe2\x6f\x62\x54\xa6\xcf\xb2\x94\xe0\x3b\xfe\x3c\x7a\xe0\x1f\x9e\x29\x3b\x07\x64\x7e\xdb\x4c\xd1\x3c\xf1\x70\xfb\x61\x7e\x44\x74\x16\x8c\xff\x76\x22\x24\xf5\x0b\x47\x52\xff\x8e\xcf\x00\x00\x00\xff\xff\x1d\x7e\x3b\x58\x25\x03\x00\x00")

func dataStatusHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataStatusHtml,
		"data/status.html",
	)
}

func dataStatusHtml() (*asset, error) {
	bytes, err := dataStatusHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/status.html", size: 805, mode: os.FileMode(436), modTime: time.Unix(1519866503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/status.html": dataStatusHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"status.html": &bintree{dataStatusHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

